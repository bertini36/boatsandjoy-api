# Generated by Django 3.0.5 on 2021-01-30 16:24

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("boats", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Day",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
            ],
            options={
                "verbose_name": "day",
                "verbose_name_plural": "days",
                "ordering": ("date",),
            },
        ),
        migrations.CreateModel(
            name="Slot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "position",
                    models.IntegerField(help_text="Slot position into day"),
                ),
                (
                    "from_hour",
                    models.TimeField(help_text="Time at which the slot starts"),
                ),
                (
                    "to_hour",
                    models.TimeField(help_text="Time at which the slot ends"),
                ),
                ("booked", models.BooleanField(default=False)),
                (
                    "day",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slots",
                        to="availability.Day",
                    ),
                ),
            ],
            options={
                "verbose_name": "slot",
                "verbose_name_plural": "slots",
                "ordering": ("position",),
            },
        ),
        migrations.CreateModel(
            name="PriceVariation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("from_date", models.DateField()),
                ("to_date", models.DateField()),
                (
                    "factor",
                    models.FloatField(
                        help_text="You can use it to define discounts with numbers less than 0 and to define increments with numbers greater than 0. Ex: if you need a 20% discount you have to specify 0.8, if you need to increase price a 50%, you have to specify 1.5 value"
                    ),
                ),
                (
                    "boat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_variations",
                        to="boats.Boat",
                    ),
                ),
            ],
            options={
                "verbose_name": "price variation",
                "verbose_name_plural": "price variations",
            },
        ),
        migrations.CreateModel(
            name="DayDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "first_time",
                    models.TimeField(
                        default=datetime.time(9, 0),
                        help_text="Time when the day starts",
                    ),
                ),
                (
                    "hours_per_slot",
                    models.IntegerField(
                        default=2,
                        help_text="How many hours define a slot",
                        validators=[
                            django.core.validators.MaxValueValidator(24),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "n_slots",
                    models.IntegerField(
                        default=0,
                        help_text="Number of availability slots in a single day",
                    ),
                ),
                (
                    "price_per_hour",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Price per hour in euros",
                        max_digits=8,
                    ),
                ),
                (
                    "from_date",
                    models.DateField(
                        help_text="Since which date this definition is available"
                    ),
                ),
                (
                    "to_date",
                    models.DateField(
                        help_text="Until which date this definition is available"
                    ),
                ),
                (
                    "n_slots_deal_threshold",
                    models.IntegerField(
                        default=0,
                        help_text="Number of slots that has to have an availability result to be considered as a good deal",
                    ),
                ),
                (
                    "discount_when_deal",
                    models.FloatField(
                        default=0.0,
                        help_text="Discount applied when availability result is composed by more than n_slots_deal_threshold slots",
                    ),
                ),
                (
                    "resident_discount",
                    models.FloatField(
                        default=0.25,
                        help_text="Discount applicable to Balearic islands residents",
                    ),
                ),
                (
                    "boat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="day_definitions",
                        to="boats.Boat",
                    ),
                ),
            ],
            options={
                "verbose_name": "day definition",
                "verbose_name_plural": "day definition",
            },
        ),
        migrations.AddField(
            model_name="day",
            name="definition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="days",
                to="availability.DayDefinition",
            ),
        ),
    ]
